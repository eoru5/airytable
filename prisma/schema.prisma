generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  Base          Base[]
  posts         Post[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Base {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  userId     String
  createdAt  DateTime @default(now()) @db.Timestamp(6)
  modifiedAt DateTime @default(now()) @db.Timestamp(6)
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Table      Table[]
}

model Table {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  baseId     String   @db.Uuid
  name       String
  createdAt  DateTime @default(now()) @db.Timestamp(6)
  modifiedAt DateTime @default(now()) @db.Timestamp(6)
  Field      Field[]
  Record     Record[]
  Base       Base     @relation(fields: [baseId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  View       View[]

  @@index([baseId])
}

model Field {
  id         Int          @id @default(autoincrement())
  tableId    String?      @db.Uuid
  name       String
  Type       fieldtype
  CellNumber CellNumber[]
  CellText   CellText[]
  Table      Table?       @relation(fields: [tableId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([tableId])
}

model CellNumber {
  id       Int    @id @default(autoincrement())
  recordId Int
  fieldId  Int
  value    Int?
  Field    Field  @relation(fields: [fieldId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "CellNumber_fieldId_fkey")
  Record   Record @relation(fields: [recordId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "CellNumber_recordId_fkey")

  @@index([fieldId])
  @@index([recordId])
}

model Record {
  id         Int          @id @default(autoincrement())
  tableId    String       @db.Uuid
  CellNumber CellNumber[]
  CellText   CellText[]
  Table      Table        @relation(fields: [tableId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([tableId])
}

model CellText {
  id       Int     @id @default(autoincrement())
  recordId Int
  fieldId  Int
  value    String?
  Field    Field   @relation(fields: [fieldId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Record   Record  @relation(fields: [recordId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([fieldId])
  @@index([recordId])
}

model View {
  tableId      String   @db.Uuid
  name         String
  createdAt    DateTime @default(now()) @db.Timestamp(6)
  modifiedAt   DateTime @default(now()) @db.Timestamp(6)
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sort         Json[]
  filters      Json[]
  hiddenFields Int[]
  Table        Table    @relation(fields: [tableId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([tableId])
}

enum fieldtype {
  Text
  Number
}
